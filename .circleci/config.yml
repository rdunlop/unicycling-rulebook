version: 2
references:
  default_job_config: &default_job_config
    # The working directory is important, so that we
    # install/cache everything relative to that location
    working_directory: ~/tmp
    docker:
      - image: cimg/ruby:2.7.6-node
        environment:
          RAILS_ENV: test
          # Bundle paths are necessary so that the gems are installed within the workspace
          # otherwise, they are installed in /usr/local
          BUNDLE_PATH: ~/tmp/vendor/bundle
          BUNDLE_APP_CONFIG: ~/tmp/vendor/bundle
      - image: cimg/postgres:14.5
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
jobs:
  build:
    <<: *default_job_config
    steps:
      - checkout

      # Gems
      # Restore the bundle of gems
      - restore_cache:
          key: gemfile-cache-{{ checksum "Gemfile.lock" }}
      - run: bundle install --without=development --jobs=2 --retry=3

      - save_cache:
          key: gemfile-cache-{{ checksum "Gemfile.lock" }}
          # NOTE: if this path directory is changed, the 'key' must be changed.
          # because caches are write-once, and always restore to the same path
          # they were in when they were stored.
          paths:
            - ~/tmp/vendor/bundle

      - run: cp config/secrets.yml.template config/secrets.yml
      - run: cp config/database.yml.template config/database.yml

      # Store the application code, configuration, and gems in a workspace
      - persist_to_workspace:
          root: .
          paths:
            - .
  rubocop:
    <<: *default_job_config
    steps:
      - attach_workspace:
          at: ~/tmp
      - run: bundle exec rubocop --config .rubocop.yml

  bundle_audit:
    <<: *default_job_config
    steps:
      - attach_workspace:
          at: ~/tmp
      - run: bundle exec bundle-audit update
      - run: bundle exec bundle-audit

  rspec:
    <<: *default_job_config
    steps:
      - attach_workspace:
          at: ~/tmp

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 2m

      # Setup DB in this job, because it cannot be shared through the attach_workspace
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # Run rspec in parallel
      - run:
          shell: /bin/bash -eo pipefail -O globstar
          name: rspec
          command: |
            bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Save test results for timing analysis
      - store_test_results:
          path: test_results

  check_db_schema:
    <<: *default_job_config
    steps:
      - attach_workspace:
          at: ~/tmp

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 2m

      # # check to ensure that we can migrate from scratch
      - run: bundle exec rake db:drop db:create db:migrate RAILS_ENV=test
      # # check that the schema.rb is the same result
      - run: git diff --exit-code db/schema.rb

  release_stage:
    <<: *default_job_config
    steps:
      - attach_workspace:
          at: ~/tmp

      - run: bundle exec cap stage deploy

  release_prod:
    <<: *default_job_config
    steps:
      - attach_workspace:
          at: ~/tmp

      - run: bundle exec cap prod deploy

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - rspec:
          requires:
            - build
      - rubocop:
          requires:
            - build
      - bundle_audit:
          requires:
            - build
      - check_db_schema:
          requires:
            - build
      - release_stage:
          requires:
            - rspec
            - rubocop
            - bundle_audit
            - check_db_schema
          filters:
            branches:
              only:
                - master
      - approve-prod-push:
          type: approval
          requires:
            - release_stage
          filters:
            branches:
              only:
                - master
      - release_prod:
          requires:
            - approve-prod-push
          filters:
            branches:
              only:
                - master
