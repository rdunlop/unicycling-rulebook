require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CommentsController do
  before(:each) do

    @proposal = FactoryGirl.create(:proposal, discussion: @discussion, status: "Review")
    @discussion = FactoryGirl.create(:discussion, :status => 'active', committee: @proposal.committee)

    @user = FactoryGirl.create(:user)
    FactoryGirl.create(:committee_member, :committee => @proposal.committee, :user => @user)

    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { comment: "hi"}
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Comment" do
        expect {
          post :create, {:comment => valid_attributes, discussion_id: @discussion.id }
        }.to change(Comment, :count).by(1)
      end

      it "assigns a newly created comment as @comment" do
        post :create, {:comment => valid_attributes, discussion_id: @discussion.id }
        assigns(:comment).should be_a(Comment)
        assigns(:comment).should be_persisted
      end

      it "redirects to the created comment" do
        post :create, {:comment => valid_attributes, discussion_id: @discussion.id }
        response.should redirect_to(@discussion)
      end

      it "sends an e-mail" do
        ActionMailer::Base.deliveries.clear
        post :create, {:comment => valid_attributes, discussion_id: @discussion.id }
        num_deliveries = ActionMailer::Base.deliveries.size
        num_deliveries.should == 1
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved comment as @comment" do
        # Trigger the behavior that occurs when invalid params are submitted
        Comment.any_instance.stub(:save).and_return(false)
        post :create, {:comment => {comment: "None"}, discussion_id: @discussion.id }
        assigns(:comment).should be_a_new(Comment)
      end

      #it "re-renders the 'proposals/show' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        #Comment.any_instance.stub(:save).and_return(false)
        #post :create, {:comment => {}, discussion_id: @discussion.id }
        #response.should render_template("propsals/show, layouts/application")
      #end
    end
  end
end
