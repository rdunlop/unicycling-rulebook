require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe WelcomeController do
  before(:each) do
    @user = FactoryGirl.create(:user)
    @proposal = FactoryGirl.create(:proposal)

    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Vote. As you add validations to Vote, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { }
  end
  
  describe "GET index" do
    it "assigns all MY proposals as @proposals" do
      cm = FactoryGirl.create(:committee_member, :user => @user)
      proposal = FactoryGirl.create(:proposal, :status => 'Voting', :owner => @user, :committee => cm.committee)
      get :index, {}
      assigns(:proposals).should eq([proposal])
    end
    describe "for an Admin" do
        before(:each) do
            @admin = FactoryGirl.create(:admin_user)
            sign_out @user
            sign_in @admin
        end
        it "assigns ALL proposals as @proposals" do
            get :index, {}
            assigns(:proposals).should eq([@proposal])
        end
    end
    describe "for a committee-admin" do
        before(:each) do
            cm = FactoryGirl.create(:committee_member, :user => @user)
            committee = cm.committee
            @other_person_proposal = FactoryGirl.create(:proposal, :status => 'Submitted', :owner => @user, :committee => cm.committee)

            new_user = FactoryGirl.create(:user)
            FactoryGirl.create(:committee_member, :user => new_user, :committee => committee, :admin => true)

            sign_out @user
            sign_in new_user
        end
        it "should see the 'Submitted' proposals in that committee" do
            get :index, {}
            assigns(:proposals).should eq([@other_person_proposal])
        end
    end
    it "shows a proposal from a different user in same committee" do
        @committee = FactoryGirl.create(:committee)
        @cm2 = FactoryGirl.create(:committee_member, :committee => @committee)
        @cm = FactoryGirl.create(:committee_member, :committee => @committee, :user => @user)
        proposal = FactoryGirl.create(:proposal, :status => 'Tabled', :owner => @cm2.user, :committee => @committee)

        get :index, {}
        assigns(:proposals).should eq([proposal])
    end
    it "should not display proposals that are in 'submitted' state from another user" do
        @committee = FactoryGirl.create(:committee)
        @cm2 = FactoryGirl.create(:committee_member, :committee => @committee)
        @cm = FactoryGirl.create(:committee_member, :committee => @committee, :user => @user)
        proposal = FactoryGirl.create(:proposal, :status => 'Submitted', :owner => @cm2.user, :committee => @committee)

        get :index, {}
        assigns(:proposals).should eq([])
    end
    describe "when not signed in" do
        before(:each) do
            sign_out @user
        end

        it "should show all proposals that are not 'Submitted'" do
            # @proposal is 'Submitted'
            proposal = FactoryGirl.create(:proposal, :status => 'Review')
            get :index, {}
            assigns(:proposals).should eq([proposal])
        end
    end
  end
end
