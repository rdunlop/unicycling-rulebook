require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe WelcomeController do
  before(:each) do
    @user = FactoryGirl.create(:user)

    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Vote. As you add validations to Vote, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { }
  end

  describe "GET message" do
    describe "as a normal user" do
      it "cannot send a message" do
        get :message, {}
        response.should redirect_to(root_path)
      end
    end
    describe "as a super-user" do
      before(:each) do
        sign_out @user
        @admin = FactoryGirl.create(:admin_user)
        sign_in @admin
      end
      it "can send a message" do
        get :message, {}
        response.should be_success
      end
      it "sets the username to the current-signed-in-user" do
        get :message, {}
        assigns(:from).should == @admin.name
      end
    end
    describe "as a committee-admin" do
      before(:each) do
        sign_out @user
        @ca = FactoryGirl.create(:user)
        FactoryGirl.create(:committee_member, :user => @ca, :admin => true)
        sign_in @ca
      end
      it "can send a message" do
        get :message, {}
        response.should be_success
      end
    end
  end

  describe "POST send_message" do
    before(:each) do
      sign_out @user
      @admin_user = FactoryGirl.create(:admin_user)
      sign_in @admin_user
    end
    it "should fail if no committees are selected" do
      post :send_message, {}
      flash[:alert].should == "No Target Selected"
    end
    it "should succeed if a committees is selected" do
      @com = FactoryGirl.create(:committee)
      FactoryGirl.create(:committee_member, committee: @com, :admin => true)
      post :send_message, {:committees => [@com.id]}
      flash[:notice].should == "Message Successfully Sent"
    end
    it "should set the reply_to address to the user's email" do
      @com = FactoryGirl.create(:committee)
      FactoryGirl.create(:committee_member, committee: @com, :admin => true)
      ActionMailer::Base.deliveries.clear
      post :send_message, {:committees => [@com.id]}
      num_deliveries = ActionMailer::Base.deliveries.size
      note = ActionMailer::Base.deliveries.first
      note.reply_to.should == [@admin_user.email]
    end
  end

  describe "GET index" do
    it "assigns all MY proposals as @proposals" do
      cm = FactoryGirl.create(:committee_member, :user => @user)
      get :index, {}
      assigns(:committees).should eq([cm.committee])
    end
  end
end
